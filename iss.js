const request = require('request');

const fetchMyIP = function(callback) {
  request('https://api.ipify.org?format=json', (error, response, body) => {
    
    if (error !== null) {
      // return autogenerated error message if user offline or domain invalid
      return callback(error, null);
       
    }
    // assume server error
    if (response.statusCode !== 200) {
      
      callback(Error(`Status Code ${response.statusCode} when fetching IP: ${body}`), null);
    
    }
    // parse IP data using JSON and callback
    else if (callback) {
      const IP = JSON.parse(body).ip;
      callback(null, IP);
    }
  });
};


const fetchCoordsByIp = function(ip, callback) {
  request(`https://freegeoip.app/json/${ip}`, (error, response, body) => {
    
    if (error) {
      // return autogenerated error message
      callback(error, null);
      
    } else if (response.statusCode !== 200) {// ISSUE: callback is not a function
      
      callback(Error(`Status Code ${response.statusCode} when fetching Coordinates for IP: ${body}`), null);
      return;
    
    } else {
      const geoCoordinates = { latitude: JSON.parse(body).latitude, longitude: JSON.parse(body).longitude };
     
      callback(null, geoCoordinates);
    }
  });
};

const fetchISSFlyOverTimes = function(coords, callback) {
  request(`https://iss-pass.herokuapp.com/json/?lat=${coords.latitude}&lon=${coords.longitude}`, (error,response, body) => {
  
    const data = JSON.parse(body);
    const flyOverTimes =  data.response;
    callback(null, flyOverTimes);
  });
};




const nextISSTimesForMyLocation = function(callback) {
  fetchMyIP((error, ip) => {
    if (error) {
      return callback(error, null);
    }

    fetchCoordsByIp(ip, (error, geoCoordinates) => {
      if (error) {
        return callback(error, null);
      }

      fetchISSFlyOverTimes(geoCoordinates, (error, nextPasses) => {
        if (error) {
          return callback(error, null);
        }

        callback(null, nextPasses);
      });
    });
  });
};

module.exports = {  nextISSTimesForMyLocation };

// module.exports = { fetchMyIP, fetchCoordsByIp, fetchISSFlyOverTimes };

// fetchMyIP, fetchCoordsByIp, fetchISSFlyOverTimes